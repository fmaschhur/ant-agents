Aufgabe 1:

Wir haben die Aufgabe in 3 Teilbereiche unterteilt. Die Klasse der Ameisen (ants.py), der Graph (graph.py, edge.py und node.py) und eine Klasse die die Ameisen Initialisiert und die Simulation von den Ameisen „leitet“ (world.py). Die Darstellung passiert durch einen Logger (logger.py) und gestartet wird die Simulation von „main.py“, die die Parameter aus „params.txt“ ausliest und an die Graphenklasse und an die „leitende“ Klasse (world.py) weitergibt.

Diese Aufteilung haben wir so gewählt, um zu verhindern, dass die Ameisen Informationen über den Graphen nutzen, die sie garnicht haben dürfen. Sie können in unserer Implementierung auf den Knoten zugreifen, auf dem sie grade stehen, sowie auf den Knoten von dem sie kamen.  
Interessant bei dem Steuern der Ameisen war außerdem, dass das laufen der Ameisen und das legen der Pheromone getrennt abläuft, damit sich Ameisen während eines Taktes nicht durch ihre Pheromon Spur beeinflussen.

Das Verdunsten der Pheromon Spur läuft bei uns mit einem Faktor. Dabei haben wir mit hohen Werten (0.85/ 0.95), also wenig Verdunstung die besten Ergebnisse erzielt. 
Gleichzeitig legt die Ameise Ihre Pheromone mit folgender Funktion ab: Pheromonstärke = (2 / (x + 1.5)) wobei x der Abstand zum Nest oder der Abstand seid dem Aufnehmen der Nahrung ist.


Frage: Geht ihr die Liste der Ameisen auch in jedem Takt zweimal durch? Habt ihr eine Idee, wie dass vielleicht schöner gelöst werden kann? 

c ) Da die Pheromonspuren nicht mehr verdunsteten, liefen die Ameisen auf dem Weg, den sie als erste gefunden haben. Wenn dieser nicht perfekt war wurde er danach nicht noch abgeändert.

d ) Durch das Ignorieren von Nahrung wird ein gleichmäßiger Nahrungsstrom gesichert, da die auch Nahrungsquellen gefunden werden die hinter anderen Nahrungsquellen liegen.




Aufgabe 2:


c)
Zu Beginn der Simulation schickt die Ameisenkönigin alle zu der Zeit vorhandenen Ameisen los. Hierbei ist wichtig, dass die Ameisen unterschiedlich weit laufen, bevor sie ins Nest zurückkehren (die Entfernungen werden größer, solange keine Nahrungsquelle gefunden wird). Dadurch warten keine Ameisen sinnlos im Nest und es wird gleichzeitig verhindert, dass gefundene Nahrungsquellen nicht schnell ausgebeutet werden können.

Nachdem die erste Quelle gefunden wurde gibt es zwei Aufgaben. Das Abbauen der Nahrung, wobei der direkte Weg zur Quelle und zurück genommen wird und das Suchen neuer Nahrungsquellen.

Wenn die ersten Nahrungsquellen gefunden wurden ist es einfach aus der Dichte der Nahrungsquellen und deren Entfernung abzuschätzen, wie viele Ameisen Nahrung abbauen sollen und wie viele neue Nahrungsquellen suchen sollten.
Dabei sollte die Anzahl der abbauenden Ameisen soviel Nahrung in einer Zeiteinheit abbauen, so dass die suchenden Ameisen in der gleichen Zeit (bei gleichbleibender Dichte von Nahrungsquellen) ebenso viel Nahrung finden.  
Auch die Frage ob es sich bei der Suche neuer Quellen eher um die Langfristige Nahrungssicherung handelt oder ob der vorhandene Nahrungsstrom kurz vor dem erliegen ist und möglichst schnell neue Quellen gefunden werden müssen, lässt sich mit zunehmender Information über die Umgebung leicht beantworten.
Bei überdurchschnittlich viel entdeckter Nahrung (zum Beispiel wenn direkt neben dem Nest ein sehr großes Nahrungsvorkommen ist, es ansonsten aber viele kleine Quellen gibt) kann es sinnvoll sein, dass die suchenden Ameisen nach der ersten neu gefundenen Quelle nicht direkt zum Nest zurückkehren.
Andererseits wäre es bei Nahrungsmangel gefährlich, wenn die suchenden Ameisen die Information nicht direkt zurück zum Nest bringen.

Bei den suchenden Ameisen haben wir Algorithmen in der Vorlesung kennen gelernt, nach denen sie sich bewegen könnten. Uns erscheint hierbei der „Brick & Mortar – Algorithmus“ sinnvoll. Hierfür müssten auf den Knoten des Graphen zwei Arten von Pheromonen abgelegt werden. „Erkundet – Pheromone“ und „Besucht – Pheromone“ wobei anders als beim gewählten Algorithmus, die als Besucht markierten Knoten überschritten werden müssen, um zurück zum Nest zu gelangen. Nachdem Informationen zum Nest gebracht wurden kann die Ameise zu ihrem Ausgangspunkt zurückkehren und mit dem Algorithmus fortführen. Damit dieser Ansatz funktioniert, muss das Nest als „Besucht“ markiert werden.

Fragen: 
Welchen Algorithmus haltet ihr für sinnvoll für das durchsuchen der Umgebung?


d)
In unserem Szenario gibt es verschiedene Ameisennester. Außerdem gibt es zu den beiden Ameisentypen aus Aufgabe 2 noch langsame „Kämpfer - Ameisen“. Diese töten die anderen beiden Ameisenarten, wenn sie auf dem gleichen Knoten stehen. Außerdem brauchen sie zwei Zeiteinheiten für die Strecke von einem Knoten zum nächsten. 
Wir haben diskutiert, welche Taktik wir nutzen würden, damit unser Nest überlebt und sind zu keinem eindeutigen Ergebnis gekommen. Auf der einen Seite gab es die Ansicht, dass es besonders am Anfang nicht sinnvoll ist, auf die langsamen Kämpfer – Ameisen zu warten,  da diese das Finden der Nahrungsquellen zu stark verlangsamen würden und es das Überleben des Nestes dadurch gefährdet wäre. Die Argumente der anderen Seite sahen die Gefahr eher darin, dass zu schnell zu viele Ameisen von den Kämpfer –Ameisen des anderen Nestes getötet werden würden und dass die zusätzlichen Ressourcen zu beginn des Szenarios nicht im Verhältnis steht zu dem Nachteil, der durch die verlorenen Ameisen entsteht. Welche Taktik in einzelnen Szenarien sinnvoller erscheint hängt jedoch stark von der Umgebung ab. Wenn die unterschiedlichen Nester nahe beieinander liegen wäre es sinnvoll den langsameren sicheren Weg zu gehen. Wenn die Nester jedoch weit auseinander liegen ist das schnelle Erkunden und dann das gezielte Einsetzen der „Kämpfer – Ameisen“ in der Richtung, aus der keine oder wenige Ameisen zurückkommen sinnvoller.


Fragen: 
Welche Taktik haltet ihr für sinnvoll?
Ist es in dem Szenario sinnvoller in einem begrenzten Feld, bei dem jedoch alle Randknoten mit „Kämpfer – Ameisen“ besetzt sind, sicher alle Nahrungsquellen abzubauen? Oder lieber in einem größeren Bereich mit vereinzelnden Ameisen am Rand nach Nahrung zu suchen?
